N.block <- length(unique(data$block)) #573 blocks
data$originX <- NA
data$originY <- NA
for(i in unique(data$block)){
data$originX[which(data$block==i)] <- median(data$LONGITUDE[which(data$block==i)])
data$originY[which(data$block==i)] <- median(data$LATITUDE[which(data$block==i)])
}
plot(data$originX, data$originY, pch=18)
###################################################
##create x,y matrix for each house on block level##
###################################################
data$LONGITUDEdiff <- NA
data$LATITUDEdiff <- NA
data$LONGITUDEdiff <- data$LONGITUDE - data$originX
data$LATITUDEdiff <- data$LATITUDE - data$originY
################################
##scale x,y of origin matrix##
###############################
scale.dim <- function(S){
Xscale <- data$originX*S+data$LONGITUDEdiff
Yscale <- data$originY*S+data$LATITUDEdiff
#look at block origins
plot(Xscale-data$LONGITUDE, Yscale-data$LATITUDE,pch=18,cex=0.08)
points(data$LONGITUDE, data$LATITUDE,pch=18,cex=0.1,col="red")
#data scaled plotted together
plot(Xscale/S, Yscale/S,pch=18,cex=0.2)
points(data$LONGITUDE, data$LATITUDE,pch=18,cex=0.2,col="red")
return(list(Xscale, Yscale))
}
#################################
###Add scale factor to map#######
#Scale set to 1.5
#################################
S <- 1.5
new.coords <- scale.dim(S)
data$LONGITUDEscale <- new.coords[[1]]*100000
data$LATITUDEscale <- new.coords[[2]]*100000
#create dataset of observations
dataforfit <- data[which(data$INSP_POSITIVA==1 | data$INSP_POSITIVA==0),]
#dataforfit <- dataforfit[1:5000,]
datapred <- data[which(data$insptime==4),]
#define time dimension
k <- length(unique(data$insptime))
#define coordinate matrix
coords1<- cbind(dataforfit$LONGITUDEscale, dataforfit$LATITUDEscale)
coords <- cbind(datapred$LONGITUDEscale, datapred$LATITUDEscale)
#create mesh
mesh1 <- inla.mesh.2d(coords1, max.edge=c(50*S,50*S),cutoff=0.2)
plot(mesh1)
points(data$LONGITUDEscale,data$LATITUDEscale,pch=18,cex=0.2,col="blue")
points(dataforfit$LONGITUDEscale, dataforfit$LATITUDEscale,col="red",pch=18,cex=0.2)
A.est <- inla.spde.make.A(mesh=mesh1,
loc=coords1,
group=dataforfit$insptime,n.group=k)
A.prd <- inla.spde.make.A(mesh=mesh1,loc=coords,group=datapred$insptime)
spde <- inla.spde2.matern(mesh1,
alpha=2,
theta.prior.mean=c(8,-5),
theta.prior.prec=c(0.1,0.1))
mesh.index <- inla.spde.make.index(name='spatial',
n.spde=spde$n.spde,n.group=k)
stack.est =
inla.stack(data=list(y=dataforfit$INSP_POSITIVA),
A=list(A.est,1),
effects=
list(c(mesh.index,list(Intercept=1)),
list(
not_sprayed=dataforfit$not_sprayed)),
tag="est")
stack.pred =
inla.stack(data=list(y=datapred$INSP_POSITIVA),
A=list(A.prd,1),
effects=
list(c(mesh.index,list(Intercept=1)),
list(
not_sprayed=datapred$not_sprayed)),
tag="pred")
stack = inla.stack(stack.est, stack.pred)
formula <- y ~ -1 + Intercept + not_sprayed + f(spatial,
model=spde,
group=spatial.group,
control.group=list(model='ar1',
hyper=list(theta=list(prior='pccor1', param=c(0, 0.9)))))
result <- inla(formula,
data = inla.stack.data(stack, spde=spde),
family = c("binomial"),verbose=TRUE,
control.predictor = list(A=inla.stack.A(stack), compute=TRUE,link=1)
,control.inla = list(reordering = "metis")
,control.fixed = list(mean = list(Intercept=-6.9, not_sprayed=1.17),
prec = list(Intercept=0.1, not_sprayed=0.1))
)
result <- inla.rerun(result)
result.f <- inla.spde2.result(result, "spatial", spde, do.transf=TRUE)
par(mfrow=c(2,3))
par(mar=c(5,3,1,1))
plot(result$marginals.fix[[1]], type="l", xlab="Intercept",
ylab="Density")
plot(result$marginals.hy[[1]], type="l", ylab="Density",
xlab=expression(phi))
plot.default(result.f$marginals.variance.nominal[[1]], type="l",
xlab=expression(sigma[x]^2), ylab="Density")
plot.default(result.f$marginals.range.nominal[[1]], type="l",
xlab="Practical range", ylab="Density")
plot(result$marginals.hy[[2]], type="l", ylab="Density",
xlab=names(result$marginals.hy)[2])
id.prd <- inla.stack.index(stack,"pred")$data
uncertainty <- probability <- matrix(NA, dim(coords)[1], dim(coords)[1])
probability <- result$summary.fitted.values$mean[id.prd]
uncertainty <- result$summary.fitted.values$sd[id.prd]
output <- datapred
varstokeep <- c("UNICODE","codeLoc", "LATITUDE", "LONGITUDE", "recentinsp")
output <- output[,varstokeep]
output <- cbind(output, probability, uncertainty)
output <- CreateColTime(output)
#set recent inspection probabilities to zero
output$probability <- ifelse(output$recentinsp>(Sys.Date()-365),0,output$probability)
output <- output[order(-output$probability),]
print(sapply(output, class))
setwd("/Users/Justin/Desktop")
pdf(file=paste("MODEL_RESULTS_prev", Sys.Date(), ".pdf", sep=""),width=20, height=15)
output <- output[order(output$probability, decreasing=TRUE),]
colfunc <- heat.colors(length(output$probability))
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
plot(output$LONGITUDE,output$LATITUDE,col=colfunc,cex=1,pch=16)
points(data$LONGITUDE,data$LATITUDE,cex=data$INSP_POSITIVA)
legend_image <- as.raster(matrix(colfunc, ncol=1))
plot(c(0,2),c(0,1),type = 'n', axes = F,xlab = '', ylab = '', main = paste(Sys.Date()))
text(x=1.5, y = seq(0,1,l=5), labels = seq(0,1,l=5))
rasterImage(colfunc, 0, 0, 1,1)
dev.off()
return(output)
}
analyze_data_forward <- function(data, params, topProbsUni) {
cat('Analyzing data...\n')
##########################################################
##############adding streets as barriers##################
##########################################################
#################################
##create origin for every block##
#################################
N.block <- length(unique(data$block)) #573 blocks
data$originX <- NA
data$originY <- NA
for(i in unique(data$block)){
data$originX[which(data$block==i)] <- median(data$LONGITUDE[which(data$block==i)])
data$originY[which(data$block==i)] <- median(data$LATITUDE[which(data$block==i)])
}
plot(data$originX, data$originY, pch=18)
###################################################
##create x,y matrix for each house on block level##
###################################################
data$LONGITUDEdiff <- NA
data$LATITUDEdiff <- NA
data$LONGITUDEdiff <- data$LONGITUDE - data$originX
data$LATITUDEdiff <- data$LATITUDE - data$originY
################################
##scale x,y of origin matrix##
###############################
scale.dim <- function(S){
Xscale <- data$originX*S+data$LONGITUDEdiff
Yscale <- data$originY*S+data$LATITUDEdiff
#look at block origins
plot(Xscale-data$LONGITUDE, Yscale-data$LATITUDE,pch=18,cex=0.08)
points(data$LONGITUDE, data$LATITUDE,pch=18,cex=0.1,col="red")
#data scaled plotted together
plot(Xscale/S, Yscale/S,pch=18,cex=0.2)
points(data$LONGITUDE, data$LATITUDE,pch=18,cex=0.2,col="red")
return(list(Xscale, Yscale))
}
#################################
###Add scale factor to map#######
#Scale set to 1.5
#################################
S <- 1.5
new.coords <- scale.dim(S)
data$LONGITUDEscale <- new.coords[[1]]*100000
data$LATITUDEscale <- new.coords[[2]]*100000
# manipulate data with topProbsUni
# should only add ONCE, which may be the problem ()
for (w in 1:length(data)) {
for (j in 1:length(topProbsUni)) {
if (as.character(data$UNICODE[w]) == as.character(topProbsUni[[j]][[1]]) & data$insptime[w]==4) {
data$INSP_POSITIVA[w] <- 0
}
}
}
#data$INSP_POSITIVA[which(data$insptime==4)] <- 0
#create dataset of observations
dataforfit <- data[which(data$INSP_POSITIVA==1 | data$INSP_POSITIVA==0),]
datapred <- data[which(data$insptime==4),]
#define time dimension
k <- length(unique(data$insptime))
#define coordinate matrix
coords1<- cbind(dataforfit$LONGITUDEscale, dataforfit$LATITUDEscale)
coords <- cbind(datapred$LONGITUDEscale, datapred$LATITUDEscale)
#create mesh
mesh1 <- inla.mesh.2d(coords1, max.edge=c(50*S,50*S),cutoff=0.2)
plot(mesh1)
points(data$LONGITUDEscale,data$LATITUDEscale,pch=18,cex=0.2,col="blue")
points(dataforfit$LONGITUDEscale, dataforfit$LATITUDEscale,col="red",pch=18,cex=0.2)
A.est <- inla.spde.make.A(mesh=mesh1,
loc=coords1,
group=dataforfit$insptime,n.group=k)
A.prd <- inla.spde.make.A(mesh=mesh1,loc=coords,group=datapred$insptime)
spde <- inla.spde2.matern(mesh1,
alpha=2,
theta.prior.mean=c(8,-5),
theta.prior.prec=c(0.1,0.1))
mesh.index <- inla.spde.make.index(name='spatial',
n.spde=spde$n.spde,n.group=k)
stack.est =
inla.stack(data=list(y=dataforfit$INSP_POSITIVA),
A=list(A.est,1),
effects=
list(c(mesh.index,list(Intercept=1)),
list(
not_sprayed=dataforfit$not_sprayed)),
tag="est")
stack.pred =
inla.stack(data=list(y=datapred$INSP_POSITIVA),
A=list(A.prd,1),
effects=
list(c(mesh.index,list(Intercept=1)),
list(
not_sprayed=datapred$not_sprayed)),
tag="pred")
stack = inla.stack(stack.est, stack.pred)
formula <- y ~ -1 + Intercept + not_sprayed + f(spatial,
model=spde,
group=spatial.group,
control.group=list(model='ar1',
hyper=list(theta=list(prior='pccor1', param=c(0, 0.9)))))
result <- inla(formula,
data = inla.stack.data(stack, spde=spde),
family = c("binomial"),verbose=TRUE,
control.predictor = list(A=inla.stack.A(stack), compute=TRUE,link=1)
,control.inla = list(reordering = "metis")
,control.fixed = list(mean = list(Intercept=-6.9, not_sprayed=1.17),
prec = list(Intercept=0.1, not_sprayed=0.1))
)
result <- inla.rerun(result)
result.f <- inla.spde2.result(result, "spatial", spde, do.transf=TRUE)
par(mfrow=c(2,3))
par(mar=c(5,3,1,1))
plot(result$marginals.fix[[1]], type="l", xlab="Intercept",
ylab="Density")
plot(result$marginals.hy[[1]], type="l", ylab="Density",
xlab=expression(phi))
plot.default(result.f$marginals.variance.nominal[[1]], type="l",
xlab=expression(sigma[x]^2), ylab="Density")
plot.default(result.f$marginals.range.nominal[[1]], type="l",
xlab="Practical range", ylab="Density")
plot(result$marginals.hy[[2]], type="l", ylab="Density",
xlab=names(result$marginals.hy)[2])
id.prd <- inla.stack.index(stack,"pred")$data
uncertainty <- probability <- matrix(NA, dim(coords)[1], dim(coords)[1])
probability <- result$summary.fitted.values$mean[id.prd]
uncertainty <- result$summary.fitted.values$sd[id.prd]
output <- datapred
varstokeep <- c("UNICODE","codeLoc", "LATITUDE", "LONGITUDE", "recentinsp")
output <- output[,varstokeep]
output <- cbind(output, probability, uncertainty)
output <- CreateColTime(output)
#set recent inspection probabilities to zero
output$probability <- ifelse(output$recentinsp>(Sys.Date()-365),0,output$probability)
output <- output[order(-output$probability),]
setwd("/Users/Justin/Desktop")
pdf(file=paste("MODEL_RESULTS_forward", Sys.Date(), ".pdf", sep=""),width=20, height=15)
output <- output[order(output$probability, decreasing=TRUE),]
colfunc <- heat.colors(length(output$probability))
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
plot(output$LONGITUDE,output$LATITUDE,col=colfunc,cex=1,pch=16)
points(data$LONGITUDE,data$LATITUDE,cex=data$INSP_POSITIVA)
legend_image <- as.raster(matrix(colfunc, ncol=1))
plot(c(0,2),c(0,1),type = 'n', axes = F,xlab = '', ylab = '', main = paste(Sys.Date()))
text(x=1.5, y = seq(0,1,l=5), labels = seq(0,1,l=5))
rasterImage(colfunc, 0, 0, 1,1)
dev.off()
# returns a list of data and output
toReturn <- list(output, data)
return(toReturn)
}
model_results <- function() {
district <- toString(readline(prompt="GPS & ROCIADO DATA:\nIMPORTANT: Do not use quotes in entry. \nPlease enter a district (only one) (e.g. '10'): "))
localities_vec <- toString(readline(prompt="GPS & ROCIADO DATA:\nIMPORTANT: Do not use quotes in entry. \nPlease enter 1 or more localities separated by ',' (e.g. '34,38'): "))
localities_vec <- strsplit(localities_vec, ',')[[1]]
localities_vec <- gsub(' ', '', localities_vec)
localities_vec <- gsub('"', '', localities_vec)
localities_vec <- gsub("'", '', localities_vec)
cat('for District:', district, ' Localities:', localities_vec,  '\n')
params <- list(district = district, localities_vec = localities_vec)
attack_data   <- get_attack_data(params=params)
prepared_data <- prepare_data(attack_data, params=params)
analyzed_data <- analyze_data(prepared_data, params=params)
return(analyzed_data)
}
model_results_forward <- function(topProbsUni) {
district <- toString(readline(prompt="GPS & ROCIADO DATA:\nIMPORTANT: Do not use quotes in entry. \nPlease enter a district (only one) (e.g. '10'): "))
localities_vec <- toString(readline(prompt="GPS & ROCIADO DATA:\nIMPORTANT: Do not use quotes in entry. \nPlease enter 1 or more localities separated by ',' (e.g. '34,38'): "))
localities_vec <- strsplit(localities_vec, ',')[[1]]
localities_vec <- gsub(' ', '', localities_vec)
localities_vec <- gsub('"', '', localities_vec)
localities_vec <- gsub("'", '', localities_vec)
cat('for District:', district, ' Localities:', localities_vec,  '\n')
params <- list(district = district, localities_vec = localities_vec)
attack_data   <- get_attack_data(params=params)
prepared_data <- prepare_data(attack_data, params=params)
analyzed_data_forward <- analyze_data_forward(prepared_data, params=params, topProbsUni=topProbsUni)
return(analyzed_data_forward)
}
forward_simulation <- function(nHouseInspect, printGraph, printPlot) {
## I: regular model results
modelOutput <- model_results()
## II: get forward model results
# get the top probability houses (their unicodes)
topProbsUni <- list()
for (i in 1:nrow(modelOutput)) {
prob <- as.numeric(modelOutput$probability[i])
uni <- as.character(modelOutput$UNICODE[i])
if (length(topProbsUni) < nHouseInspect) {
topProbsUni[[i]] <- list(uni=uni,prob=prob)
} else {
topProbsUni[order(sapply(topProbsUni,'[[',2))]
for (j in 1:nHouseInspect) {
if (topProbsUni[[j]][[2]] < prob) {
topProbsUni[[j]] <- list(uni, prob)
break
}
}
}
}
# change these unicodes in the prepared data of the next model_results_forward
returned <- model_results_forward(topProbsUni)
modelForwardOutput <- returned[[1]]
data <- returned[[2]]
## III: Have to plot the *difference* between these two plots now
#difference <- modelOutput$probability - modelForwardOutput$probability
#savedModelForwardOutput <- modelForwardOutput
toReturn <- modelForwardOutput
#modelForwardOutput$probability <- difference
if (printGraph) {
print(modelOutput$probability)
print(modelForwardOutput$probability)
setwd("/Users/Justin/Desktop")
pdf(file=paste("MODEL_RESULTS_","nHousesChanged.",nHouseInspect,"_", Sys.Date(), ".pdf", sep=""),width=20, height=15)
modelForwardOutput <- modelForwardOutput[order(modelForwardOutput$probability, decreasing=TRUE),]
colfunc <- heat.colors(length(modelForwardOutput$probability))
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
plot(modelForwardOutput$LONGITUDE,modelForwardOutput$LATITUDE,col=colfunc,cex=1,pch=16)
points(data$LONGITUDE,data$LATITUDE,cex=data$INSP_POSITIVA)
legend_image <- as.raster(matrix(colfunc, ncol=1))
plot(c(0,2),c(0,1),type = 'n', axes = F,xlab = '', ylab = '', main = paste(Sys.Date()))
text(x=1.5, y = seq(0,1,l=5), labels = seq(0,1,l=5))
rasterImage(colfunc, 0, 0, 1,1)
dev.off()
}
if (printPlot) {
hist(modelForwardOutput$probability)
}
return(toReturn)
}
compareForwardSimulations <- function(beginSim, endSim, shouldGraph, shouldPlot) {
# I: get first results
beginPoint <- forward_simulation(beginSim, FALSE, FALSE)
# II: simulate the difference
housesLeft <- endSim - beginSim
topProbsUni <- list()
for (i in 1:nrow(beginPoint)) {
prob <- as.numeric(beginPoint$probability[i])
uni <- as.character(beginPoint$UNICODE[i])
if (length(topProbsUni) < housesLeft) {
topProbsUni[[i]] <- list(uni=uni,prob=prob)
} else {
topProbsUni[order(sapply(topProbsUni,'[[',2))]
for (j in 1:length(topProbsUni)) {
if (topProbsUni[[j]][[2]] < prob) {
topProbsUni[[j]] <- list(uni, prob)
break
}
}
}
}
returned <- model_results_forward(topProbsUni)
modelForwardOutput <- returned[[1]]
data <- returned[[2]]
difference <- beginPoint$probability - modelForwardOutput$probability
saveModelForwardOutput <- modelForwardOutput
modelForwardOutput$probability <- difference
# III: plot results
if (shouldGraph) {
print(modelForwardOutput$probability)
setwd("/Users/Justin/Desktop")
pdf(file=paste("MODEL_RESULTS_","Begin.",beginSim,"_End.",endSim,"_", Sys.Date(), ".pdf", sep=""),width=20, height=15)
modelForwardOutput <- modelForwardOutput[order(modelForwardOutput$probability, decreasing=TRUE),]
colfunc <- heat.colors(length(modelForwardOutput$probability))
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
plot(modelForwardOutput$LONGITUDE,modelForwardOutput$LATITUDE,col=colfunc,cex=1,pch=16)
points(data$LONGITUDE,data$LATITUDE,cex=data$INSP_POSITIVA)
legend_image <- as.raster(matrix(colfunc, ncol=1))
plot(c(0,2),c(0,1),type = 'n', axes = F,xlab = '', ylab = '', main = paste(Sys.Date()))
text(x=1.5, y = seq(0,1,l=5), labels = seq(0,1,l=5))
rasterImage(colfunc, 0, 0, 1,1)
dev.off()
}
if (shouldPlot) {
hist(saveModelForwardOutput$probability)
}
return(saveModelForwardOutput)
}
setwd("/User/Justin/Desktop/java_workspace/MDP_AI/")
setwd("/Users/Justin/Desktop/java_workspace/MDP_AI/")
results <- read.csv("results.csv")
View(results)
hist(results)
View(results)
hist(results$XO)
hist(results$X0)
plot(results$X0)
plot(results$X0,pch="2")
plot(results$X0,pch="2")
plot(results$X0,pch="2")
plot(results$X0,pch="3")
plot(results$X0,type="o")
plot(results$X0,size='2')
plot(results$X0,cex=0.9)
plot(results$X0,cex=0.2)
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
View(results)
plot(results$X1,cex=0.1)
results <- read.csv("results.csv")
plot(results$X1,cex=0.1)
plot(results$X2,cex=0.1)
View(results)
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
lines(x = c(0,100), y = c(0,100))
plot(results$X0,cex=0.1)
lines(x = c(0,500), y = c(0,500))
qplot(1,1) + annotation_custom(linesGrob(c(0,1), c(0,1)))
plot(results$X0,cex=0.1)
abline(a=0,b=1)
abline(a=1,b=0)
abline(a=0,b=2)
abline(a=0,b=0.5)
plot(results$X0,cex=0.1)
abline(a=0,b=0.5)
results <- read.csv("results.csv")
points(results$X0,cex=0.1)
abline(a=0,b=0.5)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
abline(a=0,b=0.5)
results <- read.csv("results.csv")
points(results$X0,cex=0.1)
points(results$X0,cex=0.1,col="blue")
results <- read.csv("results.csv")
points(results$X0,cex=0.1,col="red")
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
plot(results$X1,cex=0.1)
abline(a=0,b=0.5)
results <- read.csv("results.csv")
points(results$X0,cex=0.1,col="red")
results <- read.csv("results.csv")
points(results$X0,cex=0.1,col="blue")
results <- read.csv("results.csv")
points(results$X0,cex=0.1,col="green")
points(results$X0,cex=0.1,col="yellow")
results <- read.csv("results.csv")
points(results$X0,cex=0.1,col="yellow")
View(results)
points(results$X0,cex=0.1,col="orange")
points(results$X0,cex=0.1,col="lightgrey")
results <- read.csv("results.csv")
points(results$X0,cex=0.1,col="lightgrey")
results <- read.csv("results.csv")
plot(results$X1,cex=0.1)
plot(results$X0,cex=0.1)
abline(a=0,b=0.5)
results <- read.csv("results.csv")
points(results$X0,cex=0.1,col="blue")
results <- read.csv("results.csv")
points(results$X0,cex=0.1,col="red")
points(results$X1,cex=0.1,col="red")
results <- read.csv("results.csv")
plot(results$X0,cex=0.1)
abline(a=0,b=0.5)
results <- read.csv("results.csv")
points(results$X1,cex=0.1,col="red")
points(results$X0,cex=0.1,col="red")
results <- read.csv("results.csv")
points(results$X0,cex=0.1,col="blue")
